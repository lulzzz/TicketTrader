/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.0.0 (NJsonSchema v9.3.0.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class ClientsOrdersClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(clientId: number, state: ClientOrderState | undefined): Observable<ApiResponseOfIEnumerableOfClientOrderDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (state === undefined)
            throw new Error("The parameter 'state' must be defined.");
        else
            url_ += "state=" + encodeURIComponent("" + state) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfClientOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfClientOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfClientOrderDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfClientOrderDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfClientOrderDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfClientOrderDto | null>(<any>null);
    }

    post(clientId: number): Observable<ApiResponseOfClientOrderDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfClientOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfClientOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<ApiResponseOfClientOrderDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfClientOrderDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfClientOrderDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfClientOrderDto | null>(<any>null);
    }

    get2(clientId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{id}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(clientId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{id}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(clientId: number, id: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{id}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }

    commit(clientId: number, id: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{id}/Commit";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCommit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCommit(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processCommit(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }
}

@Injectable()
export class ClientsOrdersDeliveriesClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(clientId: number, orderId: number): Observable<ApiResponseOfIEnumerableOfOrderDeliveryDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Deliveries";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfOrderDeliveryDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfOrderDeliveryDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfOrderDeliveryDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfOrderDeliveryDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfOrderDeliveryDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfOrderDeliveryDto | null>(<any>null);
    }

    post(clientId: number, orderId: number, optionId: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Deliveries";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(optionId);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }

    get2(eventId: number, clientId: number, orderId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Deliveries/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, clientId: number, orderId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Deliveries/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, clientId: number, orderId: number, id: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Deliveries/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }
}

@Injectable()
export class ClientsOrdersPaymentsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(clientId: number, orderId: number): Observable<ApiResponseOfIEnumerableOfOrderPaymentDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Payments";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfOrderPaymentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfOrderPaymentDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfOrderPaymentDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfOrderPaymentDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfOrderPaymentDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfOrderPaymentDto | null>(<any>null);
    }

    post(clientId: number, orderId: number, optionId: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Payments";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(optionId);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }

    get2(eventId: number, clientId: number, orderId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Payments/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, clientId: number, orderId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Payments/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, clientId: number, orderId: number, id: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Payments/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }
}

@Injectable()
export class ClientsOrdersReservationsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(eventId: number, clientId: number, orderId: number): Observable<ApiResponseOfIEnumerableOfSeatReservationDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Reservations/Events/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfSeatReservationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfSeatReservationDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfSeatReservationDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfSeatReservationDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfSeatReservationDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfSeatReservationDto | null>(<any>null);
    }

    post(eventId: number, clientId: number, orderId: number, sceneSeatId: number): Observable<ApiResponseOfSeatReservationDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Reservations/Events/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sceneSeatId);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfSeatReservationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfSeatReservationDto>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<ApiResponseOfSeatReservationDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfSeatReservationDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfSeatReservationDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfSeatReservationDto | null>(<any>null);
    }

    get2(eventId: number, clientId: number, orderId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Reservations/Events/{eventId}/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, clientId: number, orderId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Reservations/Events/{eventId}/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, clientId: number, orderId: number, id: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Reservations/Events/{eventId}/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }
}

@Injectable()
export class ClientsOrdersTicketsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(clientId: number, orderId: number): Observable<ApiResponseOfIEnumerableOfTicketOrderDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Tickets";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfTicketOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfTicketOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfTicketOrderDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfTicketOrderDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfTicketOrderDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfTicketOrderDto | null>(<any>null);
    }

    get2(eventId: number, clientId: number, orderId: number): Observable<ApiResponseOfIEnumerableOfTicketOrderDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Tickets/Events/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfTicketOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfTicketOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<ApiResponseOfIEnumerableOfTicketOrderDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfTicketOrderDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfTicketOrderDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfTicketOrderDto | null>(<any>null);
    }

    post(eventId: number, clientId: number, orderId: number, option: SeatPriceOptionDto | undefined): Observable<ApiResponseOfTicketOrderDto | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Tickets/Events/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(option);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfTicketOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfTicketOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<ApiResponseOfTicketOrderDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfTicketOrderDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfTicketOrderDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfTicketOrderDto | null>(<any>null);
    }

    get3(eventId: number, clientId: number, orderId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Tickets/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet3(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet3(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet3(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, clientId: number, orderId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Tickets/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, clientId: number, orderId: number, id: number): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Clients/{clientId}/Orders/{orderId}/Tickets/{id}?";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }
}

@Injectable()
export class DeliveriesClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(): Observable<ApiResponseOfIListOfDeliveryTypeDto | null> {
        let url_ = this.baseUrl + "/api/Deliveries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIListOfDeliveryTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIListOfDeliveryTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIListOfDeliveryTypeDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIListOfDeliveryTypeDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIListOfDeliveryTypeDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIListOfDeliveryTypeDto | null>(<any>null);
    }

    post(value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Deliveries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get2(id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class EventsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(): Observable<ApiResponseOfIEnumerableOfEventListItemDto | null> {
        let url_ = this.baseUrl + "/api/Events";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfEventListItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfEventListItemDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfEventListItemDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfEventListItemDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfEventListItemDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfEventListItemDto | null>(<any>null);
    }

    post(value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get2(id: number): Observable<ApiResponseOfEventListItemDto | null> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfEventListItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfEventListItemDto>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<ApiResponseOfEventListItemDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfEventListItemDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfEventListItemDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfEventListItemDto | null>(<any>null);
    }

    put(id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class EventsPriceZonesClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(eventId: number): Observable<ApiResponseOfIListOfPriceZoneListItemDto | null> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/PriceZones";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIListOfPriceZoneListItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIListOfPriceZoneListItemDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIListOfPriceZoneListItemDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIListOfPriceZoneListItemDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIListOfPriceZoneListItemDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIListOfPriceZoneListItemDto | null>(<any>null);
    }

    post(eventId: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/PriceZones";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get2(eventId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/PriceZones/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/PriceZones/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/PriceZones/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class EventsReservationsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(eventId: number): Observable<ApiResponseOfIEnumerableOfSeatReservationDto | null> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Reservations";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfSeatReservationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfSeatReservationDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfSeatReservationDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfSeatReservationDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfSeatReservationDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfSeatReservationDto | null>(<any>null);
    }

    post(eventId: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Reservations";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get2(eventId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Reservations/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Reservations/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Reservations/{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class EventsScenesClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(eventId: number): Observable<ApiResponseOfIEnumerableOfSceneDetailsDto | null> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Scenes";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfSceneDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfSceneDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfSceneDetailsDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfSceneDetailsDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfSceneDetailsDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfSceneDetailsDto | null>(<any>null);
    }

    post(eventId: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Scenes";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get2(eventId: number, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Scenes//{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Scenes//{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{eventId}/Scenes//{id}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ManagementDeliveriesClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    getAll(): Observable<string[] | null> {
        let url_ = this.baseUrl + "/api/Management/Deliveries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAll(response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAll(response: Response): Observable<string[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string[] | null>(<any>null);
    }

    deliver(): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Management/Deliveries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeliver(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeliver(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processDeliver(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }

    get(id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Management/Deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Management/Deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Management/Deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ManagementOrdersClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    getAll(): Observable<string[] | null> {
        let url_ = this.baseUrl + "/api/Management/Orders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAll(response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAll(response: Response): Observable<string[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string[] | null>(<any>null);
    }

    pay(): Observable<ApiResponse | null> {
        let url_ = this.baseUrl + "/api/Management/Orders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPay(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPay(response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponse>><any>Observable.throw(response_);
        });
    }

    protected processPay(response: Response): Observable<ApiResponse | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponse | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponse.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponse | null>(<any>null);
    }

    get(id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Management/Orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Management/Orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Management/Orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ManagementReservationsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    getAll(): Observable<string[] | null> {
        let url_ = this.baseUrl + "/api/Management/Reservations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAll(response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAll(response: Response): Observable<string[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string[] | null>(<any>null);
    }

    discard(): Observable<void> {
        let url_ = this.baseUrl + "/api/Management/Reservations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDiscard(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDiscard(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDiscard(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(): Observable<void> {
        let url_ = this.baseUrl + "/api/Management/Reservations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get(id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Management/Reservations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Management/Reservations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class PaymentsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(): Observable<ApiResponseOfIListOfPaymentTypeDto | null> {
        let url_ = this.baseUrl + "/api/Payments";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIListOfPaymentTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIListOfPaymentTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIListOfPaymentTypeDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIListOfPaymentTypeDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIListOfPaymentTypeDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIListOfPaymentTypeDto | null>(<any>null);
    }

    post(eventId: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Payments?";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    get2(id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Payments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(eventId: number, id: number, value: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Payments/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(eventId: number, id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Payments/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined and cannot be null.");
        else
            url_ += "eventId=" + encodeURIComponent("" + eventId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UsersClientsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://tickettrader.api";
    }

    get(identityId: string): Observable<ApiResponseOfIEnumerableOfUserClientDto | null> {
        let url_ = this.baseUrl + "/api/Users/{identityId}/Clients";
        if (identityId === undefined || identityId === null)
            throw new Error("The parameter 'identityId' must be defined.");
        url_ = url_.replace("{identityId}", encodeURIComponent("" + identityId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfIEnumerableOfUserClientDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfIEnumerableOfUserClientDto>><any>Observable.throw(response_);
        });
    }

    protected processGet(response: Response): Observable<ApiResponseOfIEnumerableOfUserClientDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfIEnumerableOfUserClientDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfIEnumerableOfUserClientDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfIEnumerableOfUserClientDto | null>(<any>null);
    }

    post(identityId: string, user: UserDto | undefined): Observable<ApiResponseOfUserClientDto | null> {
        let url_ = this.baseUrl + "/api/Users/{identityId}/Clients";
        if (identityId === undefined || identityId === null)
            throw new Error("The parameter 'identityId' must be defined.");
        url_ = url_.replace("{identityId}", encodeURIComponent("" + identityId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPost(response_);
                } catch (e) {
                    return <Observable<ApiResponseOfUserClientDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ApiResponseOfUserClientDto>><any>Observable.throw(response_);
        });
    }

    protected processPost(response: Response): Observable<ApiResponseOfUserClientDto | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: ApiResponseOfUserClientDto | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApiResponseOfUserClientDto.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<ApiResponseOfUserClientDto | null>(<any>null);
    }

    get2(identityId: string, id: number): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Users/{identityId}/Clients/{id}";
        if (identityId === undefined || identityId === null)
            throw new Error("The parameter 'identityId' must be defined.");
        url_ = url_.replace("{identityId}", encodeURIComponent("" + identityId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGet2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGet2(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGet2(response: Response): Observable<string | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    put(identityId: string, id: number, client: UserClientDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/{identityId}/Clients/{id}";
        if (identityId === undefined || identityId === null)
            throw new Error("The parameter 'identityId' must be defined.");
        url_ = url_.replace("{identityId}", encodeURIComponent("" + identityId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(client);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPut(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPut(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    delete(identityId: string, id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/{identityId}/Clients/{id}";
        if (identityId === undefined || identityId === null)
            throw new Error("The parameter 'identityId' must be defined.");
        url_ = url_.replace("{identityId}", encodeURIComponent("" + identityId)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

export enum ClientOrderState {
    Active = 0, 
    Expired = 1, 
    Commited = 2, 
    Finalized = 3, 
    Canceled = 4, 
}

export class ApiResponse implements IApiResponse {
    traceIdentifier?: string | undefined;
    failure: boolean;
    errorDescription?: string | undefined;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.traceIdentifier = data["traceIdentifier"];
            this.failure = data["failure"];
            this.errorDescription = data["errorDescription"];
        }
    }

    static fromJS(data: any): ApiResponse {
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["traceIdentifier"] = this.traceIdentifier;
        data["failure"] = this.failure;
        data["errorDescription"] = this.errorDescription;
        return data; 
    }
}

export interface IApiResponse {
    traceIdentifier?: string | undefined;
    failure: boolean;
    errorDescription?: string | undefined;
}

export class ApiResponseOfIEnumerableOfClientOrderDto extends ApiResponse implements IApiResponseOfIEnumerableOfClientOrderDto {
    result?: ClientOrderDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfClientOrderDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(ClientOrderDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfClientOrderDto {
        let result = new ApiResponseOfIEnumerableOfClientOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfClientOrderDto extends IApiResponse {
    result?: ClientOrderDto[] | undefined;
}

export class ClientOrderDto implements IClientOrderDto {
    id: number;
    clientId: number;
    state: ClientOrderState;
    createDateTime: Date;
    updateDateTime: Date;
    expirationTimeout: string;

    constructor(data?: IClientOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.clientId = data["clientId"];
            this.state = data["state"];
            this.createDateTime = data["createDateTime"] ? new Date(data["createDateTime"].toString()) : <any>undefined;
            this.updateDateTime = data["updateDateTime"] ? new Date(data["updateDateTime"].toString()) : <any>undefined;
            this.expirationTimeout = data["expirationTimeout"];
        }
    }

    static fromJS(data: any): ClientOrderDto {
        let result = new ClientOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["state"] = this.state;
        data["createDateTime"] = this.createDateTime ? this.createDateTime.toISOString() : <any>undefined;
        data["updateDateTime"] = this.updateDateTime ? this.updateDateTime.toISOString() : <any>undefined;
        data["expirationTimeout"] = this.expirationTimeout;
        return data; 
    }
}

export interface IClientOrderDto {
    id: number;
    clientId: number;
    state: ClientOrderState;
    createDateTime: Date;
    updateDateTime: Date;
    expirationTimeout: string;
}

export class ApiResponseOfClientOrderDto extends ApiResponse implements IApiResponseOfClientOrderDto {
    result?: ClientOrderDto | undefined;

    constructor(data?: IApiResponseOfClientOrderDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.result = data["result"] ? ClientOrderDto.fromJS(data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseOfClientOrderDto {
        let result = new ApiResponseOfClientOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfClientOrderDto extends IApiResponse {
    result?: ClientOrderDto | undefined;
}

export class ApiResponseOfIEnumerableOfOrderDeliveryDto extends ApiResponse implements IApiResponseOfIEnumerableOfOrderDeliveryDto {
    result?: OrderDeliveryDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfOrderDeliveryDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(OrderDeliveryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfOrderDeliveryDto {
        let result = new ApiResponseOfIEnumerableOfOrderDeliveryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfOrderDeliveryDto extends IApiResponse {
    result?: OrderDeliveryDto[] | undefined;
}

export class OrderDeliveryDto implements IOrderDeliveryDto {
    orderId: number;
    deliveryId?: number | undefined;

    constructor(data?: IOrderDeliveryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.deliveryId = data["deliveryId"];
        }
    }

    static fromJS(data: any): OrderDeliveryDto {
        let result = new OrderDeliveryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["deliveryId"] = this.deliveryId;
        return data; 
    }
}

export interface IOrderDeliveryDto {
    orderId: number;
    deliveryId?: number | undefined;
}

export class ApiResponseOfIEnumerableOfOrderPaymentDto extends ApiResponse implements IApiResponseOfIEnumerableOfOrderPaymentDto {
    result?: OrderPaymentDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfOrderPaymentDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(OrderPaymentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfOrderPaymentDto {
        let result = new ApiResponseOfIEnumerableOfOrderPaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfOrderPaymentDto extends IApiResponse {
    result?: OrderPaymentDto[] | undefined;
}

export class OrderPaymentDto implements IOrderPaymentDto {
    orderId: number;
    paymentId?: number | undefined;

    constructor(data?: IOrderPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.paymentId = data["paymentId"];
        }
    }

    static fromJS(data: any): OrderPaymentDto {
        let result = new OrderPaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["paymentId"] = this.paymentId;
        return data; 
    }
}

export interface IOrderPaymentDto {
    orderId: number;
    paymentId?: number | undefined;
}

export class ApiResponseOfIEnumerableOfSeatReservationDto extends ApiResponse implements IApiResponseOfIEnumerableOfSeatReservationDto {
    result?: SeatReservationDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfSeatReservationDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(SeatReservationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfSeatReservationDto {
        let result = new ApiResponseOfIEnumerableOfSeatReservationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfSeatReservationDto extends IApiResponse {
    result?: SeatReservationDto[] | undefined;
}

export class SeatReservationDto implements ISeatReservationDto {
    id: number;
    sceneSeatId: number;

    constructor(data?: ISeatReservationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.sceneSeatId = data["sceneSeatId"];
        }
    }

    static fromJS(data: any): SeatReservationDto {
        let result = new SeatReservationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sceneSeatId"] = this.sceneSeatId;
        return data; 
    }
}

export interface ISeatReservationDto {
    id: number;
    sceneSeatId: number;
}

export class ApiResponseOfSeatReservationDto extends ApiResponse implements IApiResponseOfSeatReservationDto {
    result?: SeatReservationDto | undefined;

    constructor(data?: IApiResponseOfSeatReservationDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.result = data["result"] ? SeatReservationDto.fromJS(data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseOfSeatReservationDto {
        let result = new ApiResponseOfSeatReservationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfSeatReservationDto extends IApiResponse {
    result?: SeatReservationDto | undefined;
}

export class ApiResponseOfIEnumerableOfTicketOrderDto extends ApiResponse implements IApiResponseOfIEnumerableOfTicketOrderDto {
    result?: TicketOrderDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfTicketOrderDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(TicketOrderDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfTicketOrderDto {
        let result = new ApiResponseOfIEnumerableOfTicketOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfTicketOrderDto extends IApiResponse {
    result?: TicketOrderDto[] | undefined;
}

export class TicketOrderDto implements ITicketOrderDto {
    id: number;
    priceZoneName?: string | undefined;
    priceZoneId: number;
    eventId: number;
    clientId: number;
    sceneSeatIds?: number[] | undefined;
    priceOptionId: number;
    priceOptionName?: string | undefined;
    grossAmount: number;

    constructor(data?: ITicketOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.priceZoneName = data["priceZoneName"];
            this.priceZoneId = data["priceZoneId"];
            this.eventId = data["eventId"];
            this.clientId = data["clientId"];
            if (data["sceneSeatIds"] && data["sceneSeatIds"].constructor === Array) {
                this.sceneSeatIds = [];
                for (let item of data["sceneSeatIds"])
                    this.sceneSeatIds.push(item);
            }
            this.priceOptionId = data["priceOptionId"];
            this.priceOptionName = data["priceOptionName"];
            this.grossAmount = data["grossAmount"];
        }
    }

    static fromJS(data: any): TicketOrderDto {
        let result = new TicketOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["priceZoneName"] = this.priceZoneName;
        data["priceZoneId"] = this.priceZoneId;
        data["eventId"] = this.eventId;
        data["clientId"] = this.clientId;
        if (this.sceneSeatIds && this.sceneSeatIds.constructor === Array) {
            data["sceneSeatIds"] = [];
            for (let item of this.sceneSeatIds)
                data["sceneSeatIds"].push(item);
        }
        data["priceOptionId"] = this.priceOptionId;
        data["priceOptionName"] = this.priceOptionName;
        data["grossAmount"] = this.grossAmount;
        return data; 
    }
}

export interface ITicketOrderDto {
    id: number;
    priceZoneName?: string | undefined;
    priceZoneId: number;
    eventId: number;
    clientId: number;
    sceneSeatIds?: number[] | undefined;
    priceOptionId: number;
    priceOptionName?: string | undefined;
    grossAmount: number;
}

export class SeatPriceOptionDto implements ISeatPriceOptionDto {
    sceneSeatId: number;
    priceOptionId: number;

    constructor(data?: ISeatPriceOptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sceneSeatId = data["sceneSeatId"];
            this.priceOptionId = data["priceOptionId"];
        }
    }

    static fromJS(data: any): SeatPriceOptionDto {
        let result = new SeatPriceOptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sceneSeatId"] = this.sceneSeatId;
        data["priceOptionId"] = this.priceOptionId;
        return data; 
    }
}

export interface ISeatPriceOptionDto {
    sceneSeatId: number;
    priceOptionId: number;
}

export class ApiResponseOfTicketOrderDto extends ApiResponse implements IApiResponseOfTicketOrderDto {
    result?: TicketOrderDto | undefined;

    constructor(data?: IApiResponseOfTicketOrderDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.result = data["result"] ? TicketOrderDto.fromJS(data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseOfTicketOrderDto {
        let result = new ApiResponseOfTicketOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfTicketOrderDto extends IApiResponse {
    result?: TicketOrderDto | undefined;
}

export class ApiResponseOfIListOfDeliveryTypeDto extends ApiResponse implements IApiResponseOfIListOfDeliveryTypeDto {
    result?: DeliveryTypeDto[] | undefined;

    constructor(data?: IApiResponseOfIListOfDeliveryTypeDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(DeliveryTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIListOfDeliveryTypeDto {
        let result = new ApiResponseOfIListOfDeliveryTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIListOfDeliveryTypeDto extends IApiResponse {
    result?: DeliveryTypeDto[] | undefined;
}

export class DeliveryTypeDto implements IDeliveryTypeDto {
    id: number;
    name?: string | undefined;
    priceId: number;
    grossAmount: number;
    netAmount: number;
    vatRate: number;

    constructor(data?: IDeliveryTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.priceId = data["priceId"];
            this.grossAmount = data["grossAmount"];
            this.netAmount = data["netAmount"];
            this.vatRate = data["vatRate"];
        }
    }

    static fromJS(data: any): DeliveryTypeDto {
        let result = new DeliveryTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["priceId"] = this.priceId;
        data["grossAmount"] = this.grossAmount;
        data["netAmount"] = this.netAmount;
        data["vatRate"] = this.vatRate;
        return data; 
    }
}

export interface IDeliveryTypeDto {
    id: number;
    name?: string | undefined;
    priceId: number;
    grossAmount: number;
    netAmount: number;
    vatRate: number;
}

export class ApiResponseOfIEnumerableOfEventListItemDto extends ApiResponse implements IApiResponseOfIEnumerableOfEventListItemDto {
    result?: EventListItemDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfEventListItemDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(EventListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfEventListItemDto {
        let result = new ApiResponseOfIEnumerableOfEventListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfEventListItemDto extends IApiResponse {
    result?: EventListItemDto[] | undefined;
}

export class EventListItemDto implements IEventListItemDto {
    id: number;
    title?: string | undefined;
    description?: string | undefined;
    dateTime: Date;
    duration: string;
    authors?: string | undefined;
    cast?: string | undefined;
    categories?: string[] | undefined;

    constructor(data?: IEventListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.description = data["description"];
            this.dateTime = data["dateTime"] ? new Date(data["dateTime"].toString()) : <any>undefined;
            this.duration = data["duration"];
            this.authors = data["authors"];
            this.cast = data["cast"];
            if (data["categories"] && data["categories"].constructor === Array) {
                this.categories = [];
                for (let item of data["categories"])
                    this.categories.push(item);
            }
        }
    }

    static fromJS(data: any): EventListItemDto {
        let result = new EventListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["duration"] = this.duration;
        data["authors"] = this.authors;
        data["cast"] = this.cast;
        if (this.categories && this.categories.constructor === Array) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        return data; 
    }
}

export interface IEventListItemDto {
    id: number;
    title?: string | undefined;
    description?: string | undefined;
    dateTime: Date;
    duration: string;
    authors?: string | undefined;
    cast?: string | undefined;
    categories?: string[] | undefined;
}

export class ApiResponseOfEventListItemDto extends ApiResponse implements IApiResponseOfEventListItemDto {
    result?: EventListItemDto | undefined;

    constructor(data?: IApiResponseOfEventListItemDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.result = data["result"] ? EventListItemDto.fromJS(data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseOfEventListItemDto {
        let result = new ApiResponseOfEventListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfEventListItemDto extends IApiResponse {
    result?: EventListItemDto | undefined;
}

export class ApiResponseOfIListOfPriceZoneListItemDto extends ApiResponse implements IApiResponseOfIListOfPriceZoneListItemDto {
    result?: PriceZoneListItemDto[] | undefined;

    constructor(data?: IApiResponseOfIListOfPriceZoneListItemDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(PriceZoneListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIListOfPriceZoneListItemDto {
        let result = new ApiResponseOfIListOfPriceZoneListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIListOfPriceZoneListItemDto extends IApiResponse {
    result?: PriceZoneListItemDto[] | undefined;
}

export class PriceZoneListItemDto implements IPriceZoneListItemDto {
    id: number;
    name?: string | undefined;
    scenePriceZoneId: number;
    options?: PriceOption[] | undefined;

    constructor(data?: IPriceZoneListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.scenePriceZoneId = data["scenePriceZoneId"];
            if (data["options"] && data["options"].constructor === Array) {
                this.options = [];
                for (let item of data["options"])
                    this.options.push(PriceOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PriceZoneListItemDto {
        let result = new PriceZoneListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["scenePriceZoneId"] = this.scenePriceZoneId;
        if (this.options && this.options.constructor === Array) {
            data["options"] = [];
            for (let item of this.options)
                data["options"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPriceZoneListItemDto {
    id: number;
    name?: string | undefined;
    scenePriceZoneId: number;
    options?: PriceOption[] | undefined;
}

export class PriceOption implements IPriceOption {
    id: number;
    name?: string | undefined;
    priceId: number;
    grossAmount: number;
    netAmount: number;
    vatRate: number;

    constructor(data?: IPriceOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.priceId = data["priceId"];
            this.grossAmount = data["grossAmount"];
            this.netAmount = data["netAmount"];
            this.vatRate = data["vatRate"];
        }
    }

    static fromJS(data: any): PriceOption {
        let result = new PriceOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["priceId"] = this.priceId;
        data["grossAmount"] = this.grossAmount;
        data["netAmount"] = this.netAmount;
        data["vatRate"] = this.vatRate;
        return data; 
    }
}

export interface IPriceOption {
    id: number;
    name?: string | undefined;
    priceId: number;
    grossAmount: number;
    netAmount: number;
    vatRate: number;
}

export class ApiResponseOfIEnumerableOfSceneDetailsDto extends ApiResponse implements IApiResponseOfIEnumerableOfSceneDetailsDto {
    result?: SceneDetailsDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfSceneDetailsDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(SceneDetailsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfSceneDetailsDto {
        let result = new ApiResponseOfIEnumerableOfSceneDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfSceneDetailsDto extends IApiResponse {
    result?: SceneDetailsDto[] | undefined;
}

export class SceneDetailsDto implements ISceneDetailsDto {
    id: number;
    eventId: number;
    displayName?: string | undefined;
    uniqueName?: string | undefined;

    constructor(data?: ISceneDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.eventId = data["eventId"];
            this.displayName = data["displayName"];
            this.uniqueName = data["uniqueName"];
        }
    }

    static fromJS(data: any): SceneDetailsDto {
        let result = new SceneDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["eventId"] = this.eventId;
        data["displayName"] = this.displayName;
        data["uniqueName"] = this.uniqueName;
        return data; 
    }
}

export interface ISceneDetailsDto {
    id: number;
    eventId: number;
    displayName?: string | undefined;
    uniqueName?: string | undefined;
}

export class ApiResponseOfIListOfPaymentTypeDto extends ApiResponse implements IApiResponseOfIListOfPaymentTypeDto {
    result?: PaymentTypeDto[] | undefined;

    constructor(data?: IApiResponseOfIListOfPaymentTypeDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(PaymentTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIListOfPaymentTypeDto {
        let result = new ApiResponseOfIListOfPaymentTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIListOfPaymentTypeDto extends IApiResponse {
    result?: PaymentTypeDto[] | undefined;
}

export class PaymentTypeDto implements IPaymentTypeDto {
    id: number;
    name?: string | undefined;
    priceId: number;
    grossAmount: number;
    netAmount: number;
    vatRate: number;

    constructor(data?: IPaymentTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.priceId = data["priceId"];
            this.grossAmount = data["grossAmount"];
            this.netAmount = data["netAmount"];
            this.vatRate = data["vatRate"];
        }
    }

    static fromJS(data: any): PaymentTypeDto {
        let result = new PaymentTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["priceId"] = this.priceId;
        data["grossAmount"] = this.grossAmount;
        data["netAmount"] = this.netAmount;
        data["vatRate"] = this.vatRate;
        return data; 
    }
}

export interface IPaymentTypeDto {
    id: number;
    name?: string | undefined;
    priceId: number;
    grossAmount: number;
    netAmount: number;
    vatRate: number;
}

export class ApiResponseOfIEnumerableOfUserClientDto extends ApiResponse implements IApiResponseOfIEnumerableOfUserClientDto {
    result?: UserClientDto[] | undefined;

    constructor(data?: IApiResponseOfIEnumerableOfUserClientDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["result"] && data["result"].constructor === Array) {
                this.result = [];
                for (let item of data["result"])
                    this.result.push(UserClientDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfIEnumerableOfUserClientDto {
        let result = new ApiResponseOfIEnumerableOfUserClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.result && this.result.constructor === Array) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfIEnumerableOfUserClientDto extends IApiResponse {
    result?: UserClientDto[] | undefined;
}

export class UserClientDto implements IUserClientDto {
    clientId: number;
    identityUserId?: string | undefined;
    fistName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;

    constructor(data?: IUserClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientId = data["clientId"];
            this.identityUserId = data["identityUserId"];
            this.fistName = data["fistName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.address = data["address"];
            this.city = data["city"];
            this.country = data["country"];
            this.postalCode = data["postalCode"];
        }
    }

    static fromJS(data: any): UserClientDto {
        let result = new UserClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["identityUserId"] = this.identityUserId;
        data["fistName"] = this.fistName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["address"] = this.address;
        data["city"] = this.city;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        return data; 
    }
}

export interface IUserClientDto {
    clientId: number;
    identityUserId?: string | undefined;
    fistName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
}

export class UserDto implements IUserDto {
    identityUserId?: string | undefined;
    fistName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.identityUserId = data["identityUserId"];
            this.fistName = data["fistName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.address = data["address"];
            this.city = data["city"];
            this.country = data["country"];
            this.postalCode = data["postalCode"];
        }
    }

    static fromJS(data: any): UserDto {
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identityUserId"] = this.identityUserId;
        data["fistName"] = this.fistName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["address"] = this.address;
        data["city"] = this.city;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        return data; 
    }
}

export interface IUserDto {
    identityUserId?: string | undefined;
    fistName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
}

export class ApiResponseOfUserClientDto extends ApiResponse implements IApiResponseOfUserClientDto {
    result?: UserClientDto | undefined;

    constructor(data?: IApiResponseOfUserClientDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.result = data["result"] ? UserClientDto.fromJS(data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseOfUserClientDto {
        let result = new ApiResponseOfUserClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IApiResponseOfUserClientDto extends IApiResponse {
    result?: UserClientDto | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}